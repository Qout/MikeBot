<?php

class HandlerMessages
{
	public $classes = [];
	
	public function __construct ($classes)
	{
		$this->classes = $classes;
	}
	
    protected function MEvents (string $type, array $info, array $params): void
    {
        $MEvents = $this->classes [5];
        
        if (method_exists($MEvents, $type))
		{
            $MEvents->info = $info;
            $MEvents->params = $params;
            $MEvents->$type();
        }
    }
    
	protected function action (stdclass $Events): void
	{
		if (!$GLOBALS ['EventNotifier'])return;
		
		global $KeyBoard;
		
		$action = $Events->message->action;
		
		switch ($action->type)
		{
			case 'chat_invite_user':{	// –î–æ–±–∞–≤–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞.
				// @EVENTS
			    $user_id = $action->member_id;
				
				if ((int)$user_id > 0 && substr ($user_id, 1) != GROUP_ID)
				{
					$KeyBoard->AddButton (
						'üë®‚Äçüíª –ò—Å–∫–ª—é—á–∏—Ç—å',
						['func' => 'kickuser', 'data' => [$Events->message->peer_id, $user_id]],
						false
					);
					
					$this->classes [3]->printm ("üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–µ—Å–µ–¥—É [id{$user_id}|" . $this->classes [4]->query ("SELECT * FROM MikeDb WHERE user_id = '{$user_id}'", 'array:assoc')[0]['fname'] . "].\nü§ñ –Ø –ë–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å –í–∞–º –≤–æ –≤—Å–µ–º.\n\nüí∏ –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ –ª—é–±–æ–º –∏–∑ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ <<".prefix."–ü–æ–ø–æ–ª–Ω–∏—Ç—å>> –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã.\nüí≥ –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –í—ã –º–æ–∂–µ—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <<".prefix."–ë–∞–ª–∞–Ω—Å>>.\n\nüìñ –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <<".prefix."–ö–æ–º–∞–Ω–¥—ã>>.\n\nüêæ –ñ–µ–ª–∞—é –í–∞–º —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è. ^^", '', 0, $KeyBoard->Get ());
				}
			}
			break;
			
			case 'chat_kick_user':{	// –ò—Å–∫–ª—é—á–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞.
				// @EVENTS
			    $user_id = $action->member_id;
				
				if (substr ($user_id, 1) != GROUP_ID)
				{
					$_KeyBoard = '';
					if ($user_id == $Events->message->from_id)
					{
						$KeyBoard->AddButton (
							'üë®‚Äçüíª –ò—Å–∫–ª—é—á–∏—Ç—å',
							['func' => 'kickuser', 'data' => [$Events->message->peer_id, $user_id]],
							false
						);
						
						$_KeyBoard = $KeyBoard->Get ();
					}
					
					if ((int)$user_id > 0)
						$this->classes [3]->printm ("üòø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{$user_id}|" . $this->classes [4]->query ("SELECT * FROM MikeDb WHERE user_id = '{$user_id}'", 'array:assoc')[0]['fname'] . '] –ø–æ–∫–∏–Ω—É–ª –Ω–∞—Å.', '', 0, $_KeyBoard);
					else
					{
						$GetGroupInfo = $Api->Inquiry ('groups.getById', ['group_id' => substr ($user_id, 1)]);
						
						if (!is_bool ($GetGroupInfo) && !empty (@$GetGroupInfo [0]['name']))
							$this->classes [3]->printm ("üòø –°–æ–æ–±—â–µ—Å—Ç–≤–æ [club" . substr ($user_id, 1) . '|' . @$GetGroupInfo [0]['name'] . '] –ø–æ–∫–∏–Ω—É–ª–æ –Ω–∞—Å.', '', 0, $_KeyBoard);
						else
							$this->classes [3]->printm ('üòø –°–æ–æ–±—â–µ—Å—Ç–≤–æ –ø–æ–∫–∏–Ω—É–ª–æ –Ω–∞—Å.', '', 0, $_KeyBoard);
					}
				}
			}
			break;
			
			case 'chat_title_update':{	// –ò–∑–º–µ–Ω–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫.
				// @EVENTS
				
			}
			break;
			
			case 'chat_photo_update':{	// –û–±–Ω–æ–≤–∏–ª–∏ —Ñ–æ—Ç–æ.
				// @EVENTS
				
			}
			break;
		}
	}
	
	// CallBack
	protected function event ($event, array $info): void
	{
		if ($event == null)return;
		
		$type = $event->func;
		$MEvents = $this->classes [5];
        
        if (!empty ($type) && method_exists($MEvents, $type))
        {
            $MEvents->info = $info;
            $MEvents->params = $event->data;
            $MEvents->$type();
        }
	}
	
	public function Messages (stdclass $Events): void
	{
		// @–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
		switch ($Events->type)
		{
			// @–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ
			case 'confirmation': {
				echo $this->classes [1]->SAPI ['confirmationToken'];
				return;
			}
			break;
			
			// @–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			case 'message_new': {
				$Events = $Events->object;
				
				// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —Å–æ–æ–±—â–µ–Ω–∏–∏
				$user_id = $Events->message->from_id;
				$peer_id = $Events->message->peer_id;
				$replace = '[club' . GROUP_ID . '|';
				$message = trim (str_replace ([$replace . '@' . GROUP_DOMEN . ']', $replace . GROUP_NAME . ']'], '', $Events->message->text));
				$IsChat = ($user_id == $peer_id ? false : true);
				
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è-–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–µ–º
				if (!($action = array_key_exists ('action', (array)($Events->message))) && (!($event = array_key_exists ('payload', (array)($Events->message))) || @json_decode (@$Events->message->payload)->command == 'start'))
				{
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è-–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç—ã–º
					if (!empty (trim ($message)))
					{
						// @–î–æ–±–∞–≤–ª—è–µ–º –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç—É –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞
						if (is_bool (($userInfo = RegUser ($user_id))))
							$userInfo = $this->classes [4]->query ("SELECT * FROM MikeDb WHERE user_id = '{$user_id}';", 'array:assoc') [0];
						
					    if (!empty($userInfo ['MEvents']))
					    {
							$MEventsInfo = @json_decode (@base64_decode ($userInfo ['MEvents']));
							$this->classes [4]->query ("UPDATE MikeDb SET MEvents = '' WHERE user_id = '{$user_id}'", 'q');
					        $this->MEvents ($MEventsInfo->func, [[], $Events, $userInfo], ['message' => $message, 'data' => $MEventsInfo->data]);
					    }
						
						// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è-–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
						elseif ((!$IsChat || @$message [0] == prefix))
						{
							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ñ–ª—É–¥–∏—Ç-–ª–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ—Ç.
							if ((enable_antiflood && CheckFlood ($userInfo)) || $this->classes [3]->isBan ($userInfo, true))
							{
								$this->close ();
								return;
							}
							
							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç-–ª–∏ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
							$command = mb_strtolower ((@$message [0] == prefix 
								? substr (explode (' ', $message) [0], 1)
								: explode (' ', $message) [0]));
								
							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç-–ª–∏ —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞
							if (array_key_exists ($command, $this->classes [6]))
							{
								// @–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
								{
									if (!$this->classes [6][$command]['conversations'] && $peer_id != $user_id)
									{
										$this->classes [3]->printm ('‚ùó –û—à–∏–±–∫–∞, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ—Å–µ–¥–∞—Ö.');
										$this->close ();
										return;
									}
									
									if (@$this->classes [6][$command]['conversations_only'] && $peer_id == $user_id)
									{
										$this->classes [3]->printm ('‚ùó –û—à–∏–±–∫–∞, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö.');
										$this->close ();
										return;
									}
									
									// @–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–æ–ª-–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
									$params = substr ($message, strlen ($command) + (@$message [0] == prefix ? 2 : 1));
									$params = (strlen ($params) > 0 ? GetParams ($params) : []);
									
									if (count ($params) >= $this->classes [6][$command]['params'])
									{
										// @SetParams
										$GLOBALS ['__params'] = $params;
										
										// @Execute command
										Call ($command, [$params, $Events, $userInfo]);
									}
									else
										$this->classes [3]->printm ('‚ùó –û—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –µ—â–µ ' . ($this->classes [6][$command]['params'] - count ($params)) . ' –ø–∞—Ä–∞–º–µ—Ç—Ä (-–∞, -–æ–≤).');
								}
							}
							elseif (@$message [0] == prefix)
								$this->classes [3]->printm ('‚ùó –û—à–∏–±–∫–∞, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
						}
						
						// @–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ <–ù–∞—á–∞—Ç—å> –∏ –∫–æ–º–∞–Ω–¥—ã –º–∞–π–∫.
						elseif (!$IsChat && (mb_strtolower ($message) == '–Ω–∞—á–∞—Ç—å' || mb_strtolower ($message) == '–º–∞–π–∫'))
							Call (mb_strtolower ($message), [[], $Events, $userInfo]);
					}
				}
				elseif ($action)	// –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
					$this->action ($Events);
			}
			break;
			
			// @–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
			case 'message_event': {
				$Events = $Events->object;
				$user_id = $Events->user_id;
				
				RegUser ($user_id);
				
				if (($userInfo = $this->classes [4]->query ("SELECT * FROM MikeDb WHERE user_id = '{$user_id}'", 'array:assoc')))
				{
					if (array_key_exists ('payload', (array)$Events))	// –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
						@$this->event ($Events->payload, [[], $Events, $userInfo [0]]);
				}
			}
			break;
		}
		
		// @–û—Ç–∫–ª—é—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–¥ –∏ –≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –≤—Å—ë —É –Ω–∞—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≥—É–¥!
		$this->close ();
	}
	
	protected function close(): void
	{
		// –û—Ç–∫–ª—é—á–∞–µ–º Sqlite3
		$this->classes [4]->close ();
		
		// –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö MySql
		$this->classes [7]->close ();
		
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω–æ
		echo 'ok';
	}
}

?>